#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp disable -sname log_eater@localhost -gproc gproc_dist all

-define(APPS, [gen_leader, gproc]).

main([Node, Max, AppDir, LogDir]) ->
    case net_adm:ping(list_to_atom(Node)) of
        pong ->
            %% must start gproc AFTER connecting to target node
            [application:start(A) || A <- ?APPS],
            spawn(fun () -> gproc_ps:subscribe(g, log_wrap), sniff(list_to_integer(Max), AppDir, LogDir) end),
            forever();
        _ ->
            io:format("Node ~s is unavailable.~n", [Node])
    end;
main(_) ->
    io:format("Usage: log_eater <node@host> <max_filenum>~n"),
    io:format("Where:~n    <node@hostname> - node and long host name of pixel server~n"),
    io:format("    <max_filenum>   - max log file number~n").

forever() -> receive _ -> forever() end.

sniff(MaxNum, AppDir, LogDir) ->
    receive
        {gproc_ps_event, log_wrap, Info} ->
            File = proplists:get_value(file, Info),
            Num = proplists:get_value(current_file, Info) - 1,
            PrevNum = case Num of 0 -> MaxNum; _ -> Num end,
            FileName = lists:append([AppDir, "/", File, ".", integer_to_list(PrevNum)]),
            eat(FileName, LogDir),
            sniff(MaxNum, AppDir, LogDir);
        _ ->
            io:format("WARNING: Unknown message received!~n"),
            sniff(MaxNum, AppDir, LogDir)
    end.

eat(RemoteFileName, LogDir) ->
    TS = integer_to_list(jstime(os:timestamp())),
    LocalFileName = lists:append([LogDir, "/", "track.", TS]), 
    Cmd = lists:append(["cp ", RemoteFileName, " ", LocalFileName]),
    P = erlang:open_port({spawn, Cmd},
                         [stderr_to_stdout, in, exit_status,
                          binary, stream, {line, 255}]),
    consume_output(P, RemoteFileName, LocalFileName).

consume_output(P, RemoteFileName, LocalFileName) ->
    receive 
        {P, {exit_status, 0}} ->
                io:format("Copied ~s as ~s~n", [RemoteFileName, LocalFileName]);
        {P, {exit_status, S}} ->
                io:format("Error ~p while copying ~s as ~s~n", [S, RemoteFileName, LocalFileName]);
        {P, {data, {eol, S}}} ->
            io:format("~s~n", [S]),
            consume_output(P, RemoteFileName, LocalFileName);
        {P, Data} ->
            io:format("~p~n", [Data]),
            consume_output(P, RemoteFileName, LocalFileName)
    end.

jstime({Mega, Sec, Micro}) ->    
    round(((Mega * 1000000) + Sec + (Micro / 1000000)) * 1000).
